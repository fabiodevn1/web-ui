#!/bin/bash
#
# Script para iniciar a automa√ß√£o completa de busca de im√≥veis
#

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}üöÄ SISTEMA DE AUTOMA√á√ÉO DE BUSCA${NC}"
echo -e "${GREEN}========================================${NC}"

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python3 n√£o est√° instalado${NC}"
    exit 1
fi

# Verificar arquivo .env
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Arquivo .env n√£o encontrado${NC}"
    echo "Criando arquivo .env de exemplo..."
    cat > .env << 'EOL'
# OpenAI API Key
OPENAI_API_KEY=your_openai_api_key_here

# Outras configura√ß√µes (opcional)
HEADLESS_BROWSER=false
LOG_LEVEL=INFO
EOL
    echo -e "${YELLOW}Por favor, configure o arquivo .env com sua OPENAI_API_KEY${NC}"
    exit 1
fi

# Verificar se a API key est√° configurada
if ! grep -q "OPENAI_API_KEY=sk-" .env; then
    echo -e "${RED}‚ùå OPENAI_API_KEY n√£o est√° configurada no arquivo .env${NC}"
    exit 1
fi

# Criar diret√≥rio de logs se n√£o existir
mkdir -p logs

# Verificar se h√° processos rodando
PIDS=$(pgrep -f "automacao_completa.py" | tr '\n' ' ')
if [ ! -z "$PIDS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Processos de automa√ß√£o j√° em execu√ß√£o (PIDs: $PIDS)${NC}"
    echo "Deseja parar os processos anteriores? (s/n)"
    read -p "Resposta: " resp
    if [ "$resp" = "s" ] || [ "$resp" = "S" ]; then
        pkill -f "automacao_completa.py"
        echo -e "${GREEN}‚úÖ Processos anteriores encerrados${NC}"
        sleep 2
    fi
fi

# Op√ß√µes de execu√ß√£o
echo ""
echo "Escolha o modo de execu√ß√£o:"
echo "1) Executar em foreground (ver logs em tempo real)"
echo "2) Executar em background com nohup"
echo "3) Executar em background com screen (recomendado)"
echo "4) Apenas testar um ciclo"
echo "5) Parar todos os processos"
echo ""
read -p "Op√ß√£o [1-5]: " opcao

case $opcao in
    1)
        echo -e "${GREEN}‚ñ∂Ô∏è Executando em foreground (modo headless)...${NC}"
        echo -e "${YELLOW}Pressione Ctrl+C para parar${NC}"
        echo ""
        export HEADLESS_MODE=true
        source .venv/bin/activate && python3 automacao_completa.py
        ;;
    
    2)
        echo -e "${GREEN}‚ñ∂Ô∏è Executando em background com nohup...${NC}"
        source .venv/bin/activate && nohup python3 automacao_completa.py > logs/automacao_$(date +%Y%m%d_%H%M%S).log 2>&1 &
        PID=$!
        echo -e "${GREEN}‚úÖ Processo iniciado com PID: $PID${NC}"
        echo "Para parar: kill $PID"
        echo "Para ver logs: tail -f logs/automacao_*.log"
        ;;
    
    3)
        # Verificar se screen est√° instalado
        if ! command -v screen &> /dev/null; then
            echo -e "${YELLOW}Screen n√£o est√° instalado. Instalando...${NC}"
            sudo apt-get update && sudo apt-get install -y screen
        fi
        
        echo -e "${GREEN}‚ñ∂Ô∏è Executando em background com screen...${NC}"
        screen -dmS automacao_imoveis bash -c 'source .venv/bin/activate && python3 automacao_completa.py'
        echo -e "${GREEN}‚úÖ Sess√£o screen 'automacao_imoveis' criada${NC}"
        echo ""
        echo "Comandos √∫teis:"
        echo "  Ver logs:     screen -r automacao_imoveis"
        echo "  Sair da tela: Ctrl+A, depois D"
        echo "  Listar telas: screen -ls"
        echo "  Parar:        screen -X -S automacao_imoveis quit"
        ;;
    
    4)
        echo -e "${GREEN}‚ñ∂Ô∏è Executando teste de um ciclo...${NC}"
        source .venv/bin/activate && python3 -c "
import asyncio
from automacao_completa import AutomacaoBuscaCompleta

async def teste():
    automacao = AutomacaoBuscaCompleta()
    automacao.intervalo_horas = 0  # N√£o repetir
    await automacao.executar_ciclo_completo()
    automacao.gerar_relatorio_final()

asyncio.run(teste())
"
        ;;
    
    5)
        echo -e "${YELLOW}‚èπÔ∏è Parando todos os processos...${NC}"
        pkill -f "automacao_completa.py"
        screen -X -S automacao_imoveis quit 2>/dev/null
        echo -e "${GREEN}‚úÖ Todos os processos foram parados${NC}"
        ;;
    
    *)
        echo -e "${RED}Op√ß√£o inv√°lida${NC}"
        exit 1
        ;;
esac