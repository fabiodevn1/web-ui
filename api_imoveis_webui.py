#!/usr/bin/env python3
"""
API de busca de im√≥veis usando WebUI (browser_use) para busca real na internet
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import asyncio
import json
from datetime import datetime
from browser_use import Agent
from src.utils.llm_provider import get_llm_model
import os
from dotenv import load_dotenv
from database import db, get_plataformas_ativas
import logging
from urllib.parse import quote, unquote

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="API de Im√≥veis WebUI - Busca Real", version="3.0.0")

class BuscaUnica(BaseModel):
    """Modelo para busca √∫nica de im√≥veis"""
    cidade: str
    estado: str
    tipo_operacao: str = "venda"  # venda ou aluguel
    plataforma: str = "VivaReal"  # plataforma espec√≠fica

class ResultadoBuscaUnica(BaseModel):
    """Resultado da busca √∫nica"""
    cidade: str
    estado: str
    tipo_operacao: str
    plataforma: str
    link_unico: str
    titulo_pagina: str
    total_imoveis: Optional[str] = None
    data_busca: str
    status: str
    observacoes: Optional[str] = None

def get_llm():
    """Configura e retorna o modelo LLM"""
    try:
        return get_llm_model(
            provider="openai",
            model="gpt-4o",
            temperature=0.1,
            api_key=os.getenv("OPENAI_API_KEY")
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao configurar LLM: {str(e)}")

def get_plataforma_id(nome_plataforma: str):
    """Busca ID da plataforma no banco"""
    try:
        # Tentar buscar pelo nome exato primeiro
        result = db.execute_query(
            "SELECT id FROM plataformas WHERE nome = %s AND ativo = 1",
            (nome_plataforma,)
        )
        
        # Se n√£o encontrar, tentar varia√ß√µes
        if not result:
            # Tentar com h√≠fen
            nome_alternativo = nome_plataforma.replace("VivaReal", "VIVA-REAL")
            result = db.execute_query(
                "SELECT id FROM plataformas WHERE nome = %s AND ativo = 1",
                (nome_alternativo,)
            )
        
        # Se ainda n√£o encontrar, tentar com LIKE
        if not result:
            result = db.execute_query(
                "SELECT id FROM plataformas WHERE nome LIKE %s AND ativo = 1",
                (f"%{nome_plataforma.replace('-', '')}%",)
            )
        
        if result:
            logger.info(f"‚úÖ Plataforma encontrada: ID={result[0]['id']}")
            return result[0]['id']
        else:
            logger.error(f"‚ùå Plataforma '{nome_plataforma}' n√£o encontrada no banco")
            return None
    except Exception as e:
        logger.error(f"Erro ao buscar plataforma {nome_plataforma}: {e}")
        return None

def get_tipo_busca_id(nome_tipo: str):
    """Busca ID do tipo de busca no banco"""
    try:
        result = db.execute_query(
            "SELECT id FROM tipos_busca WHERE nome = %s",
            (nome_tipo.upper(),)
        )
        return result[0]['id'] if result else None
    except Exception as e:
        logger.error(f"Erro ao buscar tipo de busca {nome_tipo}: {e}")
        return None

def salvar_link_unico(resultado: ResultadoBuscaUnica):
    """Salva o link √∫nico no banco MariaDB"""
    try:
        # Busca IDs necess√°rios
        plataforma_id = get_plataforma_id(resultado.plataforma)
        tipo_busca_id = get_tipo_busca_id(resultado.tipo_operacao)
        
        if not plataforma_id or not tipo_busca_id:
            logger.error(f"Plataforma ou tipo de busca n√£o encontrado")
            return False
        
        # Busca cidade e estado
        cidade_result = db.execute_query(
            "SELECT m.id as municipio_id, e.id as estado_id FROM municipios m JOIN estados e ON m.estado_id = e.id WHERE m.nome = %s AND e.sigla = %s",
            (resultado.cidade, resultado.estado)
        )
        
        if not cidade_result:
            logger.error(f"Cidade {resultado.cidade}/{resultado.estado} n√£o encontrada")
            return False
        
        municipio_id = cidade_result[0]['municipio_id']
        estado_id = cidade_result[0]['estado_id']
        
        # Verifica se j√° existe um link para esta combina√ß√£o
        existe = db.execute_query(
            "SELECT id FROM links_duckduckgo WHERE plataforma_id = %s AND tipo_busca_id = %s AND estado_id = %s AND municipio_id = %s",
            (plataforma_id, tipo_busca_id, estado_id, municipio_id)
        )
        
        if existe:
            # Atualiza o link existente
            update_query = """
                UPDATE links_duckduckgo 
                SET url = %s, updated_at = NOW()
                WHERE plataforma_id = %s AND tipo_busca_id = %s AND estado_id = %s AND municipio_id = %s
            """
            db.execute_update(update_query, (
                resultado.link_unico,
                plataforma_id, tipo_busca_id, estado_id, municipio_id
            ))
            logger.info(f"Link atualizado para {resultado.cidade}/{resultado.estado}")
        else:
            # Insere novo link
            insert_query = """
                INSERT INTO links_duckduckgo 
                (url, plataforma_id, tipo_busca_id, estado_id, municipio_id, 
                 distrito_id, termo_busca, posicao_busca, processado, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
            """
            db.execute_update(insert_query, (
                resultado.link_unico,
                plataforma_id,
                tipo_busca_id,
                estado_id,
                municipio_id,
                None,  # distrito_id
                f"{resultado.tipo_operacao} {resultado.cidade} {resultado.estado}",  # termo_busca
                1,  # posicao_busca (sempre 1 para link √∫nico)
                0  # processado
            ))
            logger.info(f"Novo link inserido para {resultado.cidade}/{resultado.estado}")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro ao salvar link √∫nico: {e}")
        return False

@app.get("/")
async def root():
    return {
        "message": "API de Im√≥veis WebUI - Busca Real",
        "version": "3.0.0",
        "endpoints": {
            "status": "/status",
            "buscar-unico": "/buscar-link-unico",
            "docs": "/docs"
        }
    }

@app.get("/status")
async def status():
    """Verificar status da API"""
    try:
        return {
            "status": "online",
            "timestamp": datetime.now().isoformat(),
            "llm_configured": bool(os.getenv("OPENAI_API_KEY")),
            "browser_available": True,
            "database_connected": True
        }
    except Exception as e:
        return {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        }

@app.post("/buscar-link-unico", response_model=ResultadoBuscaUnica)
async def buscar_link_unico(busca: BuscaUnica):
    """
    Busca o link oficial do VivaReal atrav√©s de pesquisa real na internet
    usando o browser_use Agent para navegar e encontrar a p√°gina correta
    """
    try:
        logger.info(f"üîç Iniciando busca real para: {busca.tipo_operacao} em {busca.cidade}, {busca.estado}")
        
        # Configurar o agente
        llm = get_llm()
        
        # Criar tarefa detalhada para o Agent fazer busca real
        task = f"""
        Voc√™ √© um assistente que precisa encontrar o link oficial do VivaReal para {busca.tipo_operacao} de im√≥veis em {busca.cidade}, {busca.estado}.

        INSTRU√á√ïES DETALHADAS PASSO A PASSO:

        1. PESQUISE NA INTERNET:
           - Abra o DuckDuckGo (https://duckduckgo.com)
           - Pesquise por: "VivaReal {busca.tipo_operacao} im√≥veis {busca.cidade} {busca.estado}"
           - Ou pesquise: "site:vivareal.com.br {busca.tipo_operacao} {busca.cidade}"

        2. ENCONTRE O LINK CORRETO:
           - Nos resultados da busca, procure pelo link oficial do VivaReal
           - O link deve ser do dom√≠nio vivareal.com.br
           - Deve ser uma p√°gina de listagem de im√≥veis, n√£o um im√≥vel espec√≠fico
           - Clique no link para navegar at√© a p√°gina

        3. VERIFIQUE A P√ÅGINA:
           - Confirme que voc√™ est√° na p√°gina correta do VivaReal
           - Verifique se √© a p√°gina de {busca.tipo_operacao} em {busca.cidade}
           - IMPORTANTE: Verifique se existem im√≥veis listados na p√°gina
           - Se n√£o houver im√≥veis, tente buscar varia√ß√µes do nome da cidade

        4. CAPTURE AS INFORMA√á√ïES:
           - URL da p√°gina atual (este √© o link oficial que precisamos)
           - T√≠tulo da p√°gina
           - Quantidade de im√≥veis dispon√≠veis (geralmente aparece como "X im√≥veis encontrados")
           - Confirme que h√° im√≥veis reais sendo mostrados

        5. SE N√ÉO ENCONTRAR IM√ìVEIS:
           - Tente buscar sem acentos: Arauc√°ria ‚Üí Araucaria
           - Tente buscar com h√≠fen: S√£o Paulo ‚Üí Sao-Paulo
           - Tente navegar manualmente no site do VivaReal usando o campo de busca

        IMPORTANTE:
        - N√ÉO construa o URL manualmente
        - SEMPRE fa√ßa a busca real e navegue at√© encontrar a p√°gina
        - VERIFIQUE se existem im√≥veis antes de retornar
        - Se n√£o encontrar im√≥veis, tente diferentes varia√ß√µes

        Retorne APENAS um JSON com o seguinte formato:
        {{
            "cidade": "{busca.cidade}",
            "estado": "{busca.estado}",
            "tipo_operacao": "{busca.tipo_operacao}",
            "plataforma": "VivaReal",
            "link_unico": "[URL REAL DA P√ÅGINA QUE VOC√ä EST√Å VENDO]",
            "titulo_pagina": "[T√çTULO DA P√ÅGINA]",
            "total_imoveis": "[QUANTIDADE DE IM√ìVEIS ENCONTRADOS]",
            "data_busca": "{datetime.now().isoformat()}",
            "status": "sucesso",
            "observacoes": "Encontrados X im√≥veis na p√°gina"
        }}
        """
        
        logger.info("ü§ñ Iniciando Agent com browser_use...")
        
        # Executar a tarefa com o Agent
        agent = Agent(
            task=task,
            llm=llm
        )
        
        # Executar com mais passos para permitir navega√ß√£o completa
        logger.info("üåê Agent navegando e buscando...")
        result = await agent.run(max_steps=50)
        
        # Processar resultado
        if result and hasattr(result, 'all_results'):
            logger.info(f"üìÑ Agent retornou {len(result.all_results)} resultados")
            
            # Procurar pelo resultado final com JSON
            for action_result in result.all_results:
                if action_result.is_done and action_result.success and action_result.extracted_content:
                    content = str(action_result.extracted_content)
                    
                    # Tentar extrair JSON do conte√∫do
                    try:
                        # Procurar por JSON no conte√∫do
                        start_idx = content.find('{')
                        end_idx = content.rfind('}') + 1
                        
                        if start_idx != -1 and end_idx > start_idx:
                            json_str = content[start_idx:end_idx]
                            dados = json.loads(json_str)
                            
                            logger.info(f"‚úÖ JSON extra√≠do com sucesso")
                            logger.info(f"   Link: {dados.get('link_unico')}")
                            logger.info(f"   Total im√≥veis: {dados.get('total_imoveis')}")
                            
                            # Criar objeto de resultado
                            resultado = ResultadoBuscaUnica(**dados)
                            
                            # Salvar no banco
                            if salvar_link_unico(resultado):
                                logger.info(f"‚úÖ Link salvo no banco de dados")
                            
                            return resultado
                            
                    except json.JSONDecodeError as e:
                        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel extrair JSON: {e}")
                        continue
            
            # Se n√£o encontrou JSON v√°lido
            logger.error("‚ùå Agent n√£o retornou um JSON v√°lido")
            raise HTTPException(
                status_code=500,
                detail="Agent n√£o conseguiu capturar as informa√ß√µes necess√°rias"
            )
        else:
            logger.error("‚ùå Agent n√£o retornou resultado")
            raise HTTPException(
                status_code=500,
                detail="Agent n√£o conseguiu completar a busca"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na busca: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na busca: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Iniciando API de Busca Real com WebUI...")
    print("üìå Esta API faz buscas reais na internet usando browser_use")
    print("üåê O navegador ser√° aberto para realizar as buscas")
    print("‚è≥ Cada busca pode levar 1-2 minutos para ser conclu√≠da")
    print("-" * 60)
    uvicorn.run(app, host="127.0.0.1", port=8003)