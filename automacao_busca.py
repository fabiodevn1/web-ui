#!/usr/bin/env python3
"""
Script de automa√ß√£o para busca peri√≥dica de im√≥veis
Executa buscas autom√°ticas e salva no banco de dados
"""

import schedule
import time
import logging
from datetime import datetime
import requests
from salvar_banco import BancoImoveis, buscar_e_salvar
import json

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('automacao_imoveis.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Configura√ß√µes de busca
CIDADES_BUSCA = [
    {"cidade": "Araucaria", "estado": "PR", "tipo": "venda"},
    {"cidade": "Araucaria", "estado": "PR", "tipo": "aluguel"},
    {"cidade": "Curitiba", "estado": "PR", "tipo": "venda"},
    {"cidade": "Curitiba", "estado": "PR", "tipo": "aluguel"},
    {"cidade": "Pinhais", "estado": "PR", "tipo": "venda"},
    {"cidade": "Pinhais", "estado": "PR", "tipo": "aluguel"},
]

# Configura√ß√µes de agendamento
HORARIOS_BUSCA = [
    "08:00",  # Manh√£
    "12:00",  # Meio-dia
    "18:00",  # Tarde
    "22:00",  # Noite
]

def verificar_api():
    """Verifica se a API est√° funcionando"""
    try:
        response = requests.get("http://127.0.0.1:8000/status", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ API est√° funcionando")
            return True
        else:
            logger.error(f"‚ùå API retornou status {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar com API: {e}")
        return False

def executar_busca_cidade(cidade: str, estado: str, tipo: str):
    """Executa busca para uma cidade espec√≠fica"""
    logger.info(f"üîç Iniciando busca: {tipo} em {cidade}, {estado}")
    
    try:
        resultado = buscar_e_salvar(
            cidade=cidade,
            estado=estado,
            tipo_operacao=tipo,
            max_paginas=2  # Limitar a 2 p√°ginas por busca
        )
        
        if resultado:
            logger.info(f"‚úÖ Busca conclu√≠da: {resultado.get('total_imoveis', 0)} im√≥veis encontrados")
            
            # Salvar log da busca
            with open('historico_buscas.json', 'a') as f:
                log_entry = {
                    "timestamp": datetime.now().isoformat(),
                    "cidade": cidade,
                    "estado": estado,
                    "tipo": tipo,
                    "total_encontrado": resultado.get('total_imoveis', 0),
                    "status": "sucesso"
                }
                f.write(json.dumps(log_entry) + '\n')
        else:
            logger.error(f"‚ùå Falha na busca: {tipo} em {cidade}, {estado}")
            
            # Salvar log de erro
            with open('historico_buscas.json', 'a') as f:
                log_entry = {
                    "timestamp": datetime.now().isoformat(),
                    "cidade": cidade,
                    "estado": estado,
                    "tipo": tipo,
                    "total_encontrado": 0,
                    "status": "erro"
                }
                f.write(json.dumps(log_entry) + '\n')
                
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o da busca: {e}")

def executar_todas_buscas():
    """Executa todas as buscas configuradas"""
    logger.info("üöÄ Iniciando execu√ß√£o de todas as buscas")
    
    # Verificar se API est√° funcionando
    if not verificar_api():
        logger.error("‚ùå API n√£o est√° funcionando. Pulando execu√ß√£o.")
        return
    
    # Executar busca para cada cidade
    for config in CIDADES_BUSCA:
        try:
            executar_busca_cidade(
                cidade=config["cidade"],
                estado=config["estado"],
                tipo=config["tipo"]
            )
            
            # Aguardar entre buscas para n√£o sobrecarregar
            time.sleep(30)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca de {config['cidade']}: {e}")
    
    logger.info("‚úÖ Execu√ß√£o de todas as buscas conclu√≠da")

def gerar_relatorio():
    """Gera relat√≥rio das buscas realizadas"""
    try:
        banco = BancoImoveis()
        stats = banco.estatisticas()
        
        logger.info("üìä Relat√≥rio de Estat√≠sticas:")
        logger.info(f"   Total de im√≥veis: {stats['total_imoveis']}")
        logger.info(f"   Por cidade: {stats['por_cidade']}")
        logger.info(f"   Por tipo: {stats['por_tipo']}")
        logger.info(f"   √öltima atualiza√ß√£o: {stats['ultima_atualizacao']}")
        
        # Salvar relat√≥rio em arquivo
        with open('relatorio_imoveis.json', 'w') as f:
            json.dump(stats, f, indent=2, default=str)
            
        logger.info("üìÑ Relat√≥rio salvo em 'relatorio_imoveis.json'")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar relat√≥rio: {e}")

def configurar_agendamento():
    """Configura o agendamento das buscas"""
    logger.info("‚è∞ Configurando agendamento das buscas")
    
    # Agendar buscas nos hor√°rios configurados
    for horario in HORARIOS_BUSCA:
        schedule.every().day.at(horario).do(executar_todas_buscas)
        logger.info(f"   Busca agendada para {horario}")
    
    # Agendar relat√≥rio di√°rio
    schedule.every().day.at("23:00").do(gerar_relatorio)
    logger.info("   Relat√≥rio agendado para 23:00")
    
    # Executar busca inicial
    logger.info("üöÄ Executando busca inicial...")
    executar_todas_buscas()

def main():
    """Fun√ß√£o principal"""
    logger.info("üè† Iniciando sistema de automa√ß√£o de busca de im√≥veis")
    
    # Configurar agendamento
    configurar_agendamento()
    
    logger.info("‚è∞ Sistema agendado. Aguardando execu√ß√£o...")
    logger.info("   Pressione Ctrl+C para parar")
    
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # Verificar a cada minuto
            
    except KeyboardInterrupt:
        logger.info("üõë Sistema interrompido pelo usu√°rio")
        
        # Gerar relat√≥rio final
        gerar_relatorio()
        
        logger.info("üëã Sistema finalizado")

if __name__ == "__main__":
    main()
